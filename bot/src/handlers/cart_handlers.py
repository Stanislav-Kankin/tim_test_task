from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter

from ..states import CheckoutState
from ..models.order import Order, Cart
from ..models import get_db
from ..keyboards.user_keyboards import cart_kb, back_to_menu_kb, main_menu_kb

import logging

router = Router()

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
)
logger = logging.getLogger(__name__)


@router.message(F.text.startswith("/add"))
async def add_to_cart(message: Message):
    try:
        parts = message.text.replace("/add", "").strip().split(",")

        if len(parts) != 3:
            await message.answer("–§–æ—Ä–º–∞—Ç: /add –ù–∞–∑–≤–∞–Ω–∏–µ, –ö–æ–ª-–≤–æ, –¶–µ–Ω–∞")
            return

        product_name = parts[0].strip()
        quantity = int(parts[1])
        price = float(parts[2])

        async with get_db() as session:
            await Cart.add_to_cart(
                session, message.from_user.id, product_name, quantity, price
            )

        await message.answer(f"‚úÖ –¢–æ–≤–∞—Ä {product_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")

    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É")
        logger.error(f"[add_to_cart] –û—à–∏–±–∫–∞: {e}")


@router.message(F.text == "–ö–æ—Ä–∑–∏–Ω–∞")
async def show_cart(message: Message):
    try:
        async with get_db() as session:
            cart_items = await Cart.get_user_cart(session, message.from_user.id)

        if not cart_items:
            await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞", reply_markup=back_to_menu_kb())
            return

        total = sum(item.price * item.quantity for item in cart_items)
        items_text = "\n".join(
            f"{item.product_name} - {item.quantity} x {item.price} —Ä—É–±."
            for item in cart_items
        )

        await message.answer(
            f"üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n{items_text}\n\n–ò—Ç–æ–≥–æ: {total} —Ä—É–±.",
            reply_markup=cart_kb()
        )
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ—Ä–∑–∏–Ω—ã")
        logger.error(f"[show_cart] –û—à–∏–±–∫–∞: {e}")


@router.callback_query(F.data == "clear_cart")
async def clear_cart(callback: CallbackQuery):
    try:
        async with get_db() as session:
            await Cart.clear_user_cart(session, callback.from_user.id)

        await callback.message.edit_text("üßπ –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞", reply_markup=back_to_menu_kb())
    except Exception as e:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã")
        logger.error(f"[clear_cart] –û—à–∏–±–∫–∞: {e}")


@router.callback_query(F.data == "checkout")
async def checkout(callback: CallbackQuery, state: FSMContext):
    try:
        async with get_db() as session:
            cart_items = await Cart.get_user_cart(session, callback.from_user.id)

        if not cart_items:
            await callback.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
            return

        await callback.message.answer(
            "üì¶ –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–§–ò–û, –∞–¥—Ä–µ—Å, —Ç–µ–ª–µ—Ñ–æ–Ω"
        )
        await state.set_state(CheckoutState.waiting_for_delivery_info)
    except Exception as e:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")
        logger.error(f"[checkout] –û—à–∏–±–∫–∞: {e}")


@router.message(StateFilter(CheckoutState.waiting_for_delivery_info))
async def process_delivery_info(message: Message, state: FSMContext):
    try:
        delivery_info = message.text
        async with get_db() as session:
            order_id = await Order.create_from_cart(
                session,
                message.from_user.id,
                delivery_info
            )

        await message.answer(
            f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.",
            reply_markup=main_menu_kb()
        )
        await state.clear()
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")
        logger.error(f"[process_delivery_info] –û—à–∏–±–∫–∞: {e}")


@router.message(F.text == "–ú–æ–∏ –∑–∞–∫–∞–∑—ã")
async def my_orders(message: Message):
    try:
        async with get_db() as session:
            orders = await Order.get_user_orders(session, message.from_user.id)

        if not orders:
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
            return

        orders_text = "\n\n".join(
            f"üì¶ #{o.id} ‚Äî {o.product_name} x{o.quantity}, {o.status}\n"
            f"üìç {o.delivery_info}" for o in orders
        )

        await message.answer(f"–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n\n{orders_text}")
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤")
        logger.error(f"[my_orders] –û—à–∏–±–∫–∞: {e}")


@router.message(F.text == "–ü–æ–º–æ—â—å")
async def help_handler(message: Message):
    await message.answer(
        "üìã –ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å\n"
        "/menu ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/add –ù–∞–∑–≤–∞–Ω–∏–µ, –ö–æ–ª-–≤–æ, –¶–µ–Ω–∞ ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"
    )
